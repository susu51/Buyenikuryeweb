{"dependencies":[{"name":"../constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":20,"index":187},"end":{"line":5,"column":43,"index":210}}],"key":"zmjjtqoQxi2W71eIMIIaEi1mOpU=","exportNames":["*"],"imports":1}},{"name":"../fork/getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":33,"index":245},"end":{"line":6,"column":74,"index":286}}],"key":"Pwl2s8MefiXMrO7elNt6TT2k9Bo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultRouteInfo = void 0;\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  const constants_1 = require(_dependencyMap[0], \"../constants\");\n  const getPathFromState_forks_1 = require(_dependencyMap[1], \"../fork/getPathFromState-forks\");\n  exports.defaultRouteInfo = {\n    unstable_globalHref: '',\n    searchParams: new URLSearchParams(),\n    pathname: '/',\n    params: {},\n    segments: [],\n    pathnameWithParams: '/',\n    // TODO: Remove this, it is not used anywhere\n    isIndex: false\n  };\n  function getRouteInfoFromState(state) {\n    if (!state) return exports.defaultRouteInfo;\n    const index = 'index' in state ? state.index ?? 0 : 0;\n    let route = state.routes[index];\n    if (route.name === constants_1.NOT_FOUND_ROUTE_NAME || route.name === constants_1.SITEMAP_ROUTE_NAME) {\n      const path = route.path || (route.name === constants_1.NOT_FOUND_ROUTE_NAME ? '/' : `/${route.name}`);\n      return Object.assign({}, exports.defaultRouteInfo, {\n        unstable_globalHref: (0, getPathFromState_forks_1.appendBaseUrl)(path),\n        pathname: path,\n        pathnameWithParams: path,\n        segments: [route.name]\n      });\n    }\n    if (route.name !== constants_1.INTERNAL_SLOT_NAME) {\n      throw new Error(`Expected the first route to be ${constants_1.INTERNAL_SLOT_NAME}, but got ${route.name}`);\n    }\n    state = route.state;\n    const segments = [];\n    let params = Object.create(null);\n    while (state) {\n      route = state.routes['index' in state && state.index ? state.index : 0];\n      Object.assign(params, route.params);\n      let routeName = route.name;\n      if (routeName.startsWith('/')) {\n        routeName = routeName.slice(1);\n      }\n      segments.push(...routeName.split('/'));\n      state = route.state;\n    }\n    params = Object.fromEntries(Object.entries(params).map(([key, value]) => {\n      if (typeof value === 'string') {\n        return [key, safeDecodeURIComponent(value)];\n      } else if (Array.isArray(value)) {\n        return [key, value.map(v => safeDecodeURIComponent(v))];\n      } else {\n        return [key, value];\n      }\n    }));\n    /**\n     * If React Navigation didn't render the entire tree (e.g it was interrupted in a layout)\n     * then the state maybe incomplete. The reset of the path is in the params, instead of being a route\n     */\n    let routeParams = route.params;\n    while (routeParams && 'screen' in routeParams) {\n      if (typeof routeParams.screen === 'string') {\n        const screen = routeParams.screen.startsWith('/') ? routeParams.screen.slice(1) : routeParams.screen;\n        segments.push(...screen.split('/'));\n      }\n      if (typeof routeParams.params === 'object' && !Array.isArray(routeParams.params)) {\n        routeParams = routeParams.params;\n      } else {\n        routeParams = undefined;\n      }\n    }\n    if (route.params && 'screen' in route.params && route.params.screen === 'string') {\n      const screen = route.params.screen.startsWith('/') ? route.params.screen.slice(1) : route.params.screen;\n      segments.push(...screen.split('/'));\n    }\n    if (segments[segments.length - 1] === 'index') {\n      segments.pop();\n    }\n    delete params['screen'];\n    delete params['params'];\n    const pathParams = new Set();\n    const pathname = '/' + segments.filter(segment => {\n      return !(segment.startsWith('(') && segment.endsWith(')'));\n    }).flatMap(segment => {\n      if (segment === '+not-found') {\n        const notFoundPath = params['not-found'];\n        pathParams.add('not-found');\n        if (typeof notFoundPath === 'undefined') {\n          // Not founds are optional, do nothing if its not present\n          return [];\n        } else if (Array.isArray(notFoundPath)) {\n          return notFoundPath;\n        } else {\n          return [notFoundPath];\n        }\n      } else if (segment.startsWith('[...') && segment.endsWith(']')) {\n        let paramName = segment.slice(4, -1);\n        // Legacy for React Navigation optional params\n        if (paramName.endsWith('?')) {\n          paramName = paramName.slice(0, -1);\n        }\n        const values = params[paramName];\n        pathParams.add(paramName);\n        // Catchall params are optional\n        return values || [];\n      } else if (segment.startsWith('[') && segment.endsWith(']')) {\n        const paramName = segment.slice(1, -1);\n        const value = params[paramName];\n        pathParams.add(paramName);\n        // Optional params are optional\n        return value ? [value] : [];\n      } else {\n        return [segment];\n      }\n    }).join('/');\n    const searchParams = new URLSearchParams(Object.entries(params).flatMap(([key, value]) => {\n      // Search params should not include path params\n      if (pathParams.has(key)) {\n        return [];\n      } else if (Array.isArray(value)) {\n        return value.map(v => [key, v]);\n      }\n      return [[key, value]];\n    }));\n    let hash;\n    if (searchParams.has('#')) {\n      hash = searchParams.get('#') || undefined;\n      searchParams.delete('#');\n    }\n    // We cannot use searchParams.size because it is not included in the React Native polyfill\n    const searchParamString = searchParams.toString();\n    let pathnameWithParams = searchParamString ? pathname + '?' + searchParamString : pathname;\n    pathnameWithParams = hash ? pathnameWithParams + '#' + hash : pathnameWithParams;\n    return {\n      segments,\n      pathname,\n      params,\n      unstable_globalHref: (0, getPathFromState_forks_1.appendBaseUrl)(pathnameWithParams),\n      searchParams,\n      pathnameWithParams,\n      // TODO: Remove this, it is not used anywhere\n      isIndex: false\n    };\n  }\n  function safeDecodeURIComponent(value) {\n    try {\n      return typeof value === 'string' ? decodeURIComponent(value) : value;\n    } catch {\n      // If the value is not a valid URI component, return it as is\n      return value;\n    }\n  }\n});","lineCount":156,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"defaultRouteInfo"],[7,26,3,24],[7,29,3,27],[7,34,3,32],[7,35,3,33],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getRouteInfoFromState"],[8,31,4,29],[8,34,4,32,"getRouteInfoFromState"],[8,55,4,53],[9,2,5,0],[9,8,5,6,"constants_1"],[9,19,5,17],[9,22,5,20,"require"],[9,29,5,27],[9,30,5,27,"_dependencyMap"],[9,44,5,27],[9,63,5,42],[9,64,5,43],[10,2,6,0],[10,8,6,6,"getPathFromState_forks_1"],[10,32,6,30],[10,35,6,33,"require"],[10,42,6,40],[10,43,6,40,"_dependencyMap"],[10,57,6,40],[10,94,6,73],[10,95,6,74],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"defaultRouteInfo"],[11,26,7,24],[11,29,7,27],[12,4,8,4,"unstable_globalHref"],[12,23,8,23],[12,25,8,25],[12,27,8,27],[13,4,9,4,"searchParams"],[13,16,9,16],[13,18,9,18],[13,22,9,22,"URLSearchParams"],[13,37,9,37],[13,38,9,38],[13,39,9,39],[14,4,10,4,"pathname"],[14,12,10,12],[14,14,10,14],[14,17,10,17],[15,4,11,4,"params"],[15,10,11,10],[15,12,11,12],[15,13,11,13],[15,14,11,14],[16,4,12,4,"segments"],[16,12,12,12],[16,14,12,14],[16,16,12,16],[17,4,13,4,"pathnameWithParams"],[17,22,13,22],[17,24,13,24],[17,27,13,27],[18,4,14,4],[19,4,15,4,"isIndex"],[19,11,15,11],[19,13,15,13],[20,2,16,0],[20,3,16,1],[21,2,17,0],[21,11,17,9,"getRouteInfoFromState"],[21,32,17,30,"getRouteInfoFromState"],[21,33,17,31,"state"],[21,38,17,36],[21,40,17,38],[22,4,18,4],[22,8,18,8],[22,9,18,9,"state"],[22,14,18,14],[22,16,19,8],[22,23,19,15,"exports"],[22,30,19,22],[22,31,19,23,"defaultRouteInfo"],[22,47,19,39],[23,4,20,4],[23,10,20,10,"index"],[23,15,20,15],[23,18,20,18],[23,25,20,25],[23,29,20,29,"state"],[23,34,20,34],[23,37,20,38,"state"],[23,42,20,43],[23,43,20,44,"index"],[23,48,20,49],[23,52,20,53],[23,53,20,54],[23,56,20,58],[23,57,20,59],[24,4,21,4],[24,8,21,8,"route"],[24,13,21,13],[24,16,21,16,"state"],[24,21,21,21],[24,22,21,22,"routes"],[24,28,21,28],[24,29,21,29,"index"],[24,34,21,34],[24,35,21,35],[25,4,22,4],[25,8,22,8,"route"],[25,13,22,13],[25,14,22,14,"name"],[25,18,22,18],[25,23,22,23,"constants_1"],[25,34,22,34],[25,35,22,35,"NOT_FOUND_ROUTE_NAME"],[25,55,22,55],[25,59,22,59,"route"],[25,64,22,64],[25,65,22,65,"name"],[25,69,22,69],[25,74,22,74,"constants_1"],[25,85,22,85],[25,86,22,86,"SITEMAP_ROUTE_NAME"],[25,104,22,104],[25,106,22,106],[26,6,23,8],[26,12,23,14,"path"],[26,16,23,18],[26,19,23,21,"route"],[26,24,23,26],[26,25,23,27,"path"],[26,29,23,31],[26,34,23,36,"route"],[26,39,23,41],[26,40,23,42,"name"],[26,44,23,46],[26,49,23,51,"constants_1"],[26,60,23,62],[26,61,23,63,"NOT_FOUND_ROUTE_NAME"],[26,81,23,83],[26,84,23,86],[26,87,23,89],[26,90,23,92],[26,94,23,96,"route"],[26,99,23,101],[26,100,23,102,"name"],[26,104,23,106],[26,106,23,108],[26,107,23,109],[27,6,24,8],[27,13,24,8,"Object"],[27,19,24,8],[27,20,24,8,"assign"],[27,26,24,8],[27,31,25,15,"exports"],[27,38,25,22],[27,39,25,23,"defaultRouteInfo"],[27,55,25,39],[28,8,26,12,"unstable_globalHref"],[28,27,26,31],[28,29,26,33],[28,30,26,34],[28,31,26,35],[28,33,26,37,"getPathFromState_forks_1"],[28,57,26,61],[28,58,26,62,"appendBaseUrl"],[28,71,26,75],[28,73,26,77,"path"],[28,77,26,81],[28,78,26,82],[29,8,27,12,"pathname"],[29,16,27,20],[29,18,27,22,"path"],[29,22,27,26],[30,8,28,12,"pathnameWithParams"],[30,26,28,30],[30,28,28,32,"path"],[30,32,28,36],[31,8,29,12,"segments"],[31,16,29,20],[31,18,29,22],[31,19,29,23,"route"],[31,24,29,28],[31,25,29,29,"name"],[31,29,29,33],[32,6,29,34],[33,4,31,4],[34,4,32,4],[34,8,32,8,"route"],[34,13,32,13],[34,14,32,14,"name"],[34,18,32,18],[34,23,32,23,"constants_1"],[34,34,32,34],[34,35,32,35,"INTERNAL_SLOT_NAME"],[34,53,32,53],[34,55,32,55],[35,6,33,8],[35,12,33,14],[35,16,33,18,"Error"],[35,21,33,23],[35,22,33,24],[35,56,33,58,"constants_1"],[35,67,33,69],[35,68,33,70,"INTERNAL_SLOT_NAME"],[35,86,33,88],[35,99,33,101,"route"],[35,104,33,106],[35,105,33,107,"name"],[35,109,33,111],[35,111,33,113],[35,112,33,114],[36,4,34,4],[37,4,35,4,"state"],[37,9,35,9],[37,12,35,12,"route"],[37,17,35,17],[37,18,35,18,"state"],[37,23,35,23],[38,4,36,4],[38,10,36,10,"segments"],[38,18,36,18],[38,21,36,21],[38,23,36,23],[39,4,37,4],[39,8,37,8,"params"],[39,14,37,14],[39,17,37,17,"Object"],[39,23,37,23],[39,24,37,24,"create"],[39,30,37,30],[39,31,37,31],[39,35,37,35],[39,36,37,36],[40,4,38,4],[40,11,38,11,"state"],[40,16,38,16],[40,18,38,18],[41,6,39,8,"route"],[41,11,39,13],[41,14,39,16,"state"],[41,19,39,21],[41,20,39,22,"routes"],[41,26,39,28],[41,27,39,29],[41,34,39,36],[41,38,39,40,"state"],[41,43,39,45],[41,47,39,49,"state"],[41,52,39,54],[41,53,39,55,"index"],[41,58,39,60],[41,61,39,63,"state"],[41,66,39,68],[41,67,39,69,"index"],[41,72,39,74],[41,75,39,77],[41,76,39,78],[41,77,39,79],[42,6,40,8,"Object"],[42,12,40,14],[42,13,40,15,"assign"],[42,19,40,21],[42,20,40,22,"params"],[42,26,40,28],[42,28,40,30,"route"],[42,33,40,35],[42,34,40,36,"params"],[42,40,40,42],[42,41,40,43],[43,6,41,8],[43,10,41,12,"routeName"],[43,19,41,21],[43,22,41,24,"route"],[43,27,41,29],[43,28,41,30,"name"],[43,32,41,34],[44,6,42,8],[44,10,42,12,"routeName"],[44,19,42,21],[44,20,42,22,"startsWith"],[44,30,42,32],[44,31,42,33],[44,34,42,36],[44,35,42,37],[44,37,42,39],[45,8,43,12,"routeName"],[45,17,43,21],[45,20,43,24,"routeName"],[45,29,43,33],[45,30,43,34,"slice"],[45,35,43,39],[45,36,43,40],[45,37,43,41],[45,38,43,42],[46,6,44,8],[47,6,45,8,"segments"],[47,14,45,16],[47,15,45,17,"push"],[47,19,45,21],[47,20,45,22],[47,23,45,25,"routeName"],[47,32,45,34],[47,33,45,35,"split"],[47,38,45,40],[47,39,45,41],[47,42,45,44],[47,43,45,45],[47,44,45,46],[48,6,46,8,"state"],[48,11,46,13],[48,14,46,16,"route"],[48,19,46,21],[48,20,46,22,"state"],[48,25,46,27],[49,4,47,4],[50,4,48,4,"params"],[50,10,48,10],[50,13,48,13,"Object"],[50,19,48,19],[50,20,48,20,"fromEntries"],[50,31,48,31],[50,32,48,32,"Object"],[50,38,48,38],[50,39,48,39,"entries"],[50,46,48,46],[50,47,48,47,"params"],[50,53,48,53],[50,54,48,54],[50,55,48,55,"map"],[50,58,48,58],[50,59,48,59],[50,60,48,60],[50,61,48,61,"key"],[50,64,48,64],[50,66,48,66,"value"],[50,71,48,71],[50,72,48,72],[50,77,48,77],[51,6,49,8],[51,10,49,12],[51,17,49,19,"value"],[51,22,49,24],[51,27,49,29],[51,35,49,37],[51,37,49,39],[52,8,50,12],[52,15,50,19],[52,16,50,20,"key"],[52,19,50,23],[52,21,50,25,"safeDecodeURIComponent"],[52,43,50,47],[52,44,50,48,"value"],[52,49,50,53],[52,50,50,54],[52,51,50,55],[53,6,51,8],[53,7,51,9],[53,13,52,13],[53,17,52,17,"Array"],[53,22,52,22],[53,23,52,23,"isArray"],[53,30,52,30],[53,31,52,31,"value"],[53,36,52,36],[53,37,52,37],[53,39,52,39],[54,8,53,12],[54,15,53,19],[54,16,53,20,"key"],[54,19,53,23],[54,21,53,25,"value"],[54,26,53,30],[54,27,53,31,"map"],[54,30,53,34],[54,31,53,36,"v"],[54,32,53,37],[54,36,53,42,"safeDecodeURIComponent"],[54,58,53,64],[54,59,53,65,"v"],[54,60,53,66],[54,61,53,67],[54,62,53,68],[54,63,53,69],[55,6,54,8],[55,7,54,9],[55,13,55,13],[56,8,56,12],[56,15,56,19],[56,16,56,20,"key"],[56,19,56,23],[56,21,56,25,"value"],[56,26,56,30],[56,27,56,31],[57,6,57,8],[58,4,58,4],[58,5,58,5],[58,6,58,6],[58,7,58,7],[59,4,59,4],[60,0,60,0],[61,0,61,0],[62,0,62,0],[63,4,63,4],[63,8,63,8,"routeParams"],[63,19,63,19],[63,22,63,22,"route"],[63,27,63,27],[63,28,63,28,"params"],[63,34,63,34],[64,4,64,4],[64,11,64,11,"routeParams"],[64,22,64,22],[64,26,64,26],[64,34,64,34],[64,38,64,38,"routeParams"],[64,49,64,49],[64,51,64,51],[65,6,65,8],[65,10,65,12],[65,17,65,19,"routeParams"],[65,28,65,30],[65,29,65,31,"screen"],[65,35,65,37],[65,40,65,42],[65,48,65,50],[65,50,65,52],[66,8,66,12],[66,14,66,18,"screen"],[66,20,66,24],[66,23,66,27,"routeParams"],[66,34,66,38],[66,35,66,39,"screen"],[66,41,66,45],[66,42,66,46,"startsWith"],[66,52,66,56],[66,53,66,57],[66,56,66,60],[66,57,66,61],[66,60,67,18,"routeParams"],[66,71,67,29],[66,72,67,30,"screen"],[66,78,67,36],[66,79,67,37,"slice"],[66,84,67,42],[66,85,67,43],[66,86,67,44],[66,87,67,45],[66,90,68,18,"routeParams"],[66,101,68,29],[66,102,68,30,"screen"],[66,108,68,36],[67,8,69,12,"segments"],[67,16,69,20],[67,17,69,21,"push"],[67,21,69,25],[67,22,69,26],[67,25,69,29,"screen"],[67,31,69,35],[67,32,69,36,"split"],[67,37,69,41],[67,38,69,42],[67,41,69,45],[67,42,69,46],[67,43,69,47],[68,6,70,8],[69,6,71,8],[69,10,71,12],[69,17,71,19,"routeParams"],[69,28,71,30],[69,29,71,31,"params"],[69,35,71,37],[69,40,71,42],[69,48,71,50],[69,52,71,54],[69,53,71,55,"Array"],[69,58,71,60],[69,59,71,61,"isArray"],[69,66,71,68],[69,67,71,69,"routeParams"],[69,78,71,80],[69,79,71,81,"params"],[69,85,71,87],[69,86,71,88],[69,88,71,90],[70,8,72,12,"routeParams"],[70,19,72,23],[70,22,72,26,"routeParams"],[70,33,72,37],[70,34,72,38,"params"],[70,40,72,44],[71,6,73,8],[71,7,73,9],[71,13,74,13],[72,8,75,12,"routeParams"],[72,19,75,23],[72,22,75,26,"undefined"],[72,31,75,35],[73,6,76,8],[74,4,77,4],[75,4,78,4],[75,8,78,8,"route"],[75,13,78,13],[75,14,78,14,"params"],[75,20,78,20],[75,24,78,24],[75,32,78,32],[75,36,78,36,"route"],[75,41,78,41],[75,42,78,42,"params"],[75,48,78,48],[75,52,78,52,"route"],[75,57,78,57],[75,58,78,58,"params"],[75,64,78,64],[75,65,78,65,"screen"],[75,71,78,71],[75,76,78,76],[75,84,78,84],[75,86,78,86],[76,6,79,8],[76,12,79,14,"screen"],[76,18,79,20],[76,21,79,23,"route"],[76,26,79,28],[76,27,79,29,"params"],[76,33,79,35],[76,34,79,36,"screen"],[76,40,79,42],[76,41,79,43,"startsWith"],[76,51,79,53],[76,52,79,54],[76,55,79,57],[76,56,79,58],[76,59,80,14,"route"],[76,64,80,19],[76,65,80,20,"params"],[76,71,80,26],[76,72,80,27,"screen"],[76,78,80,33],[76,79,80,34,"slice"],[76,84,80,39],[76,85,80,40],[76,86,80,41],[76,87,80,42],[76,90,81,14,"route"],[76,95,81,19],[76,96,81,20,"params"],[76,102,81,26],[76,103,81,27,"screen"],[76,109,81,33],[77,6,82,8,"segments"],[77,14,82,16],[77,15,82,17,"push"],[77,19,82,21],[77,20,82,22],[77,23,82,25,"screen"],[77,29,82,31],[77,30,82,32,"split"],[77,35,82,37],[77,36,82,38],[77,39,82,41],[77,40,82,42],[77,41,82,43],[78,4,83,4],[79,4,84,4],[79,8,84,8,"segments"],[79,16,84,16],[79,17,84,17,"segments"],[79,25,84,25],[79,26,84,26,"length"],[79,32,84,32],[79,35,84,35],[79,36,84,36],[79,37,84,37],[79,42,84,42],[79,49,84,49],[79,51,84,51],[80,6,85,8,"segments"],[80,14,85,16],[80,15,85,17,"pop"],[80,18,85,20],[80,19,85,21],[80,20,85,22],[81,4,86,4],[82,4,87,4],[82,11,87,11,"params"],[82,17,87,17],[82,18,87,18],[82,26,87,26],[82,27,87,27],[83,4,88,4],[83,11,88,11,"params"],[83,17,88,17],[83,18,88,18],[83,26,88,26],[83,27,88,27],[84,4,89,4],[84,10,89,10,"pathParams"],[84,20,89,20],[84,23,89,23],[84,27,89,27,"Set"],[84,30,89,30],[84,31,89,31],[84,32,89,32],[85,4,90,4],[85,10,90,10,"pathname"],[85,18,90,18],[85,21,90,21],[85,24,90,24],[85,27,91,8,"segments"],[85,35,91,16],[85,36,92,13,"filter"],[85,42,92,19],[85,43,92,21,"segment"],[85,50,92,28],[85,54,92,33],[86,6,93,12],[86,13,93,19],[86,15,93,21,"segment"],[86,22,93,28],[86,23,93,29,"startsWith"],[86,33,93,39],[86,34,93,40],[86,37,93,43],[86,38,93,44],[86,42,93,48,"segment"],[86,49,93,55],[86,50,93,56,"endsWith"],[86,58,93,64],[86,59,93,65],[86,62,93,68],[86,63,93,69],[86,64,93,70],[87,4,94,8],[87,5,94,9],[87,6,94,10],[87,7,95,13,"flatMap"],[87,14,95,20],[87,15,95,22,"segment"],[87,22,95,29],[87,26,95,34],[88,6,96,12],[88,10,96,16,"segment"],[88,17,96,23],[88,22,96,28],[88,34,96,40],[88,36,96,42],[89,8,97,16],[89,14,97,22,"notFoundPath"],[89,26,97,34],[89,29,97,37,"params"],[89,35,97,43],[89,36,97,44],[89,47,97,55],[89,48,97,56],[90,8,98,16,"pathParams"],[90,18,98,26],[90,19,98,27,"add"],[90,22,98,30],[90,23,98,31],[90,34,98,42],[90,35,98,43],[91,8,99,16],[91,12,99,20],[91,19,99,27,"notFoundPath"],[91,31,99,39],[91,36,99,44],[91,47,99,55],[91,49,99,57],[92,10,100,20],[93,10,101,20],[93,17,101,27],[93,19,101,29],[94,8,102,16],[94,9,102,17],[94,15,103,21],[94,19,103,25,"Array"],[94,24,103,30],[94,25,103,31,"isArray"],[94,32,103,38],[94,33,103,39,"notFoundPath"],[94,45,103,51],[94,46,103,52],[94,48,103,54],[95,10,104,20],[95,17,104,27,"notFoundPath"],[95,29,104,39],[96,8,105,16],[96,9,105,17],[96,15,106,21],[97,10,107,20],[97,17,107,27],[97,18,107,28,"notFoundPath"],[97,30,107,40],[97,31,107,41],[98,8,108,16],[99,6,109,12],[99,7,109,13],[99,13,110,17],[99,17,110,21,"segment"],[99,24,110,28],[99,25,110,29,"startsWith"],[99,35,110,39],[99,36,110,40],[99,42,110,46],[99,43,110,47],[99,47,110,51,"segment"],[99,54,110,58],[99,55,110,59,"endsWith"],[99,63,110,67],[99,64,110,68],[99,67,110,71],[99,68,110,72],[99,70,110,74],[100,8,111,16],[100,12,111,20,"paramName"],[100,21,111,29],[100,24,111,32,"segment"],[100,31,111,39],[100,32,111,40,"slice"],[100,37,111,45],[100,38,111,46],[100,39,111,47],[100,41,111,49],[100,42,111,50],[100,43,111,51],[100,44,111,52],[101,8,112,16],[102,8,113,16],[102,12,113,20,"paramName"],[102,21,113,29],[102,22,113,30,"endsWith"],[102,30,113,38],[102,31,113,39],[102,34,113,42],[102,35,113,43],[102,37,113,45],[103,10,114,20,"paramName"],[103,19,114,29],[103,22,114,32,"paramName"],[103,31,114,41],[103,32,114,42,"slice"],[103,37,114,47],[103,38,114,48],[103,39,114,49],[103,41,114,51],[103,42,114,52],[103,43,114,53],[103,44,114,54],[104,8,115,16],[105,8,116,16],[105,14,116,22,"values"],[105,20,116,28],[105,23,116,31,"params"],[105,29,116,37],[105,30,116,38,"paramName"],[105,39,116,47],[105,40,116,48],[106,8,117,16,"pathParams"],[106,18,117,26],[106,19,117,27,"add"],[106,22,117,30],[106,23,117,31,"paramName"],[106,32,117,40],[106,33,117,41],[107,8,118,16],[108,8,119,16],[108,15,119,23,"values"],[108,21,119,29],[108,25,119,33],[108,27,119,35],[109,6,120,12],[109,7,120,13],[109,13,121,17],[109,17,121,21,"segment"],[109,24,121,28],[109,25,121,29,"startsWith"],[109,35,121,39],[109,36,121,40],[109,39,121,43],[109,40,121,44],[109,44,121,48,"segment"],[109,51,121,55],[109,52,121,56,"endsWith"],[109,60,121,64],[109,61,121,65],[109,64,121,68],[109,65,121,69],[109,67,121,71],[110,8,122,16],[110,14,122,22,"paramName"],[110,23,122,31],[110,26,122,34,"segment"],[110,33,122,41],[110,34,122,42,"slice"],[110,39,122,47],[110,40,122,48],[110,41,122,49],[110,43,122,51],[110,44,122,52],[110,45,122,53],[110,46,122,54],[111,8,123,16],[111,14,123,22,"value"],[111,19,123,27],[111,22,123,30,"params"],[111,28,123,36],[111,29,123,37,"paramName"],[111,38,123,46],[111,39,123,47],[112,8,124,16,"pathParams"],[112,18,124,26],[112,19,124,27,"add"],[112,22,124,30],[112,23,124,31,"paramName"],[112,32,124,40],[112,33,124,41],[113,8,125,16],[114,8,126,16],[114,15,126,23,"value"],[114,20,126,28],[114,23,126,31],[114,24,126,32,"value"],[114,29,126,37],[114,30,126,38],[114,33,126,41],[114,35,126,43],[115,6,127,12],[115,7,127,13],[115,13,128,17],[116,8,129,16],[116,15,129,23],[116,16,129,24,"segment"],[116,23,129,31],[116,24,129,32],[117,6,130,12],[118,4,131,8],[118,5,131,9],[118,6,131,10],[118,7,132,13,"join"],[118,11,132,17],[118,12,132,18],[118,15,132,21],[118,16,132,22],[119,4,133,4],[119,10,133,10,"searchParams"],[119,22,133,22],[119,25,133,25],[119,29,133,29,"URLSearchParams"],[119,44,133,44],[119,45,133,45,"Object"],[119,51,133,51],[119,52,133,52,"entries"],[119,59,133,59],[119,60,133,60,"params"],[119,66,133,66],[119,67,133,67],[119,68,133,68,"flatMap"],[119,75,133,75],[119,76,133,76],[119,77,133,77],[119,78,133,78,"key"],[119,81,133,81],[119,83,133,83,"value"],[119,88,133,88],[119,89,133,89],[119,94,133,94],[120,6,134,8],[121,6,135,8],[121,10,135,12,"pathParams"],[121,20,135,22],[121,21,135,23,"has"],[121,24,135,26],[121,25,135,27,"key"],[121,28,135,30],[121,29,135,31],[121,31,135,33],[122,8,136,12],[122,15,136,19],[122,17,136,21],[123,6,137,8],[123,7,137,9],[123,13,138,13],[123,17,138,17,"Array"],[123,22,138,22],[123,23,138,23,"isArray"],[123,30,138,30],[123,31,138,31,"value"],[123,36,138,36],[123,37,138,37],[123,39,138,39],[124,8,139,12],[124,15,139,19,"value"],[124,20,139,24],[124,21,139,25,"map"],[124,24,139,28],[124,25,139,30,"v"],[124,26,139,31],[124,30,139,36],[124,31,139,37,"key"],[124,34,139,40],[124,36,139,42,"v"],[124,37,139,43],[124,38,139,44],[124,39,139,45],[125,6,140,8],[126,6,141,8],[126,13,141,15],[126,14,141,16],[126,15,141,17,"key"],[126,18,141,20],[126,20,141,22,"value"],[126,25,141,27],[126,26,141,28],[126,27,141,29],[127,4,142,4],[127,5,142,5],[127,6,142,6],[127,7,142,7],[128,4,143,4],[128,8,143,8,"hash"],[128,12,143,12],[129,4,144,4],[129,8,144,8,"searchParams"],[129,20,144,20],[129,21,144,21,"has"],[129,24,144,24],[129,25,144,25],[129,28,144,28],[129,29,144,29],[129,31,144,31],[130,6,145,8,"hash"],[130,10,145,12],[130,13,145,15,"searchParams"],[130,25,145,27],[130,26,145,28,"get"],[130,29,145,31],[130,30,145,32],[130,33,145,35],[130,34,145,36],[130,38,145,40,"undefined"],[130,47,145,49],[131,6,146,8,"searchParams"],[131,18,146,20],[131,19,146,21,"delete"],[131,25,146,27],[131,26,146,28],[131,29,146,31],[131,30,146,32],[132,4,147,4],[133,4,148,4],[134,4,149,4],[134,10,149,10,"searchParamString"],[134,27,149,27],[134,30,149,30,"searchParams"],[134,42,149,42],[134,43,149,43,"toString"],[134,51,149,51],[134,52,149,52],[134,53,149,53],[135,4,150,4],[135,8,150,8,"pathnameWithParams"],[135,26,150,26],[135,29,150,29,"searchParamString"],[135,46,150,46],[135,49,150,49,"pathname"],[135,57,150,57],[135,60,150,60],[135,63,150,63],[135,66,150,66,"searchParamString"],[135,83,150,83],[135,86,150,86,"pathname"],[135,94,150,94],[136,4,151,4,"pathnameWithParams"],[136,22,151,22],[136,25,151,25,"hash"],[136,29,151,29],[136,32,151,32,"pathnameWithParams"],[136,50,151,50],[136,53,151,53],[136,56,151,56],[136,59,151,59,"hash"],[136,63,151,63],[136,66,151,66,"pathnameWithParams"],[136,84,151,84],[137,4,152,4],[137,11,152,11],[138,6,153,8,"segments"],[138,14,153,16],[139,6,154,8,"pathname"],[139,14,154,16],[140,6,155,8,"params"],[140,12,155,14],[141,6,156,8,"unstable_globalHref"],[141,25,156,27],[141,27,156,29],[141,28,156,30],[141,29,156,31],[141,31,156,33,"getPathFromState_forks_1"],[141,55,156,57],[141,56,156,58,"appendBaseUrl"],[141,69,156,71],[141,71,156,73,"pathnameWithParams"],[141,89,156,91],[141,90,156,92],[142,6,157,8,"searchParams"],[142,18,157,20],[143,6,158,8,"pathnameWithParams"],[143,24,158,26],[144,6,159,8],[145,6,160,8,"isIndex"],[145,13,160,15],[145,15,160,17],[146,4,161,4],[146,5,161,5],[147,2,162,0],[148,2,163,0],[148,11,163,9,"safeDecodeURIComponent"],[148,33,163,31,"safeDecodeURIComponent"],[148,34,163,32,"value"],[148,39,163,37],[148,41,163,39],[149,4,164,4],[149,8,164,8],[150,6,165,8],[150,13,165,15],[150,20,165,22,"value"],[150,25,165,27],[150,30,165,32],[150,38,165,40],[150,41,165,43,"decodeURIComponent"],[150,59,165,61],[150,60,165,62,"value"],[150,65,165,67],[150,66,165,68],[150,69,165,71,"value"],[150,74,165,76],[151,4,166,4],[151,5,166,5],[151,6,167,4],[151,12,167,10],[152,6,168,8],[153,6,169,8],[153,13,169,15,"value"],[153,18,169,20],[154,4,170,4],[155,2,171,0],[156,0,171,1],[156,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","Object.entries.map$argument_0","value.map$argument_0","segments.filter$argument_0","segments.filter.flatMap$argument_0","Object.entries.flatMap$argument_0","safeDecodeURIComponent"],"mappings":"AAA;ACgB;2DC+B;mCCK,gCD;KDK;oBGkC;SHE;qBIC;SJoC;4EKE;6BHM,eG;KLG;CDoB;AOC;CPQ"},"hasCjsExports":true},"type":"js/module"}]}