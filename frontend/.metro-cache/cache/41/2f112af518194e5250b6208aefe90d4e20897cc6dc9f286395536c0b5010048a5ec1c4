{"dependencies":[{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":33,"index":1606},"end":{"line":39,"column":56,"index":1629}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0=","exportNames":["*"],"imports":1}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":26,"index":1658},"end":{"line":40,"column":61,"index":1693}}],"key":"t0FyaMgwHS2Lt2mTiJkOs7AsCtY=","exportNames":["*"],"imports":1}},{"name":"../navigationParams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":27,"index":1723},"end":{"line":41,"column":57,"index":1753}}],"key":"KeDGhIQYe7bEwtueZKPQrXQYcV0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathFromState = getPathFromState;\n  exports.getPathDataFromState = getPathDataFromState;\n  exports.appendBaseUrl = appendBaseUrl;\n  const queryString = __importStar(require(_dependencyMap[0], \"query-string\"));\n  const expo = __importStar(require(_dependencyMap[1], \"./getPathFromState-forks\"));\n  const navigationParams_1 = require(_dependencyMap[2], \"../navigationParams\");\n  // END FORK\n  const getActiveRoute = state => {\n    const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  let cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    const configs = cachedNormalizedConfigs[1];\n    let path = '/';\n    let current = state;\n    const allParams = {};\n    while (current) {\n      let index = typeof current.index === 'number' ? current.index : 0;\n      let route = current.routes[index];\n      let pattern;\n      let focusedParams;\n      const focusedRoute = getActiveRoute(state);\n      let currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      const nestedRouteNames = [];\n      let hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          const stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = Object.assign({}, currentParams);\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              const name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          const screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          const targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          const screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = Object.assign({}, screens[screen], {\n              name: screen,\n              key: screen\n            });\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          const nextRoute = route.state.routes[index];\n          const nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed(Object.assign({}, options, {\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        }));\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (const param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        focusedParams = (0, navigationParams_1.removeInternalExpoRouterParams)(focusedParams);\n        // END FORK\n        const query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  const joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  const createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    const pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  const createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(([name, c]) => {\n    const result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path, baseUrl = \"\") {\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n});","lineCount":332,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,51],[28,62,18,63],[29,4,19,4],[29,8,19,8,"ownKeys"],[29,15,19,15],[29,18,19,18],[29,27,19,18,"ownKeys"],[29,28,19,27,"o"],[29,29,19,28],[29,31,19,30],[30,6,20,8,"ownKeys"],[30,13,20,15],[30,16,20,18,"Object"],[30,22,20,24],[30,23,20,25,"getOwnPropertyNames"],[30,42,20,44],[30,46,20,48],[30,56,20,58,"o"],[30,57,20,59],[30,59,20,61],[31,8,21,12],[31,12,21,16,"ar"],[31,14,21,18],[31,17,21,21],[31,19,21,23],[32,8,22,12],[32,13,22,17],[32,17,22,21,"k"],[32,18,22,22],[32,22,22,26,"o"],[32,23,22,27],[32,25,22,29],[32,29,22,33,"Object"],[32,35,22,39],[32,36,22,40,"prototype"],[32,45,22,49],[32,46,22,50,"hasOwnProperty"],[32,60,22,64],[32,61,22,65,"call"],[32,65,22,69],[32,66,22,70,"o"],[32,67,22,71],[32,69,22,73,"k"],[32,70,22,74],[32,71,22,75],[32,73,22,77,"ar"],[32,75,22,79],[32,76,22,80,"ar"],[32,78,22,82],[32,79,22,83,"length"],[32,85,22,89],[32,86,22,90],[32,89,22,93,"k"],[32,90,22,94],[33,8,23,12],[33,15,23,19,"ar"],[33,17,23,21],[34,6,24,8],[34,7,24,9],[35,6,25,8],[35,13,25,15,"ownKeys"],[35,20,25,22],[35,21,25,23,"o"],[35,22,25,24],[35,23,25,25],[36,4,26,4],[36,5,26,5],[37,4,27,4],[37,11,27,11],[37,21,27,21,"mod"],[37,24,27,24],[37,26,27,26],[38,6,28,8],[38,10,28,12,"mod"],[38,13,28,15],[38,17,28,19,"mod"],[38,20,28,22],[38,21,28,23,"__esModule"],[38,31,28,33],[38,33,28,35],[38,40,28,42,"mod"],[38,43,28,45],[39,6,29,8],[39,10,29,12,"result"],[39,16,29,18],[39,19,29,21],[39,20,29,22],[39,21,29,23],[40,6,30,8],[40,10,30,12,"mod"],[40,13,30,15],[40,17,30,19],[40,21,30,23],[40,23,30,25],[40,28,30,30],[40,32,30,34,"k"],[40,33,30,35],[40,36,30,38,"ownKeys"],[40,43,30,45],[40,44,30,46,"mod"],[40,47,30,49],[40,48,30,50],[40,50,30,52,"i"],[40,51,30,53],[40,54,30,56],[40,55,30,57],[40,57,30,59,"i"],[40,58,30,60],[40,61,30,63,"k"],[40,62,30,64],[40,63,30,65,"length"],[40,69,30,71],[40,71,30,73,"i"],[40,72,30,74],[40,74,30,76],[40,76,30,78],[40,80,30,82,"k"],[40,81,30,83],[40,82,30,84,"i"],[40,83,30,85],[40,84,30,86],[40,89,30,91],[40,98,30,100],[40,100,30,102,"__createBinding"],[40,115,30,117],[40,116,30,118,"result"],[40,122,30,124],[40,124,30,126,"mod"],[40,127,30,129],[40,129,30,131,"k"],[40,130,30,132],[40,131,30,133,"i"],[40,132,30,134],[40,133,30,135],[40,134,30,136],[41,6,31,8,"__setModuleDefault"],[41,24,31,26],[41,25,31,27,"result"],[41,31,31,33],[41,33,31,35,"mod"],[41,36,31,38],[41,37,31,39],[42,6,32,8],[42,13,32,15,"result"],[42,19,32,21],[43,4,33,4],[43,5,33,5],[44,2,34,0],[44,3,34,1],[44,4,34,3],[44,5,34,4],[45,2,35,0,"Object"],[45,8,35,6],[45,9,35,7,"defineProperty"],[45,23,35,21],[45,24,35,22,"exports"],[45,31,35,29],[45,33,35,31],[45,45,35,43],[45,47,35,45],[46,4,35,47,"value"],[46,9,35,52],[46,11,35,54],[47,2,35,59],[47,3,35,60],[47,4,35,61],[48,2,36,0,"exports"],[48,9,36,7],[48,10,36,8,"getPathFromState"],[48,26,36,24],[48,29,36,27,"getPathFromState"],[48,45,36,43],[49,2,37,0,"exports"],[49,9,37,7],[49,10,37,8,"getPathDataFromState"],[49,30,37,28],[49,33,37,31,"getPathDataFromState"],[49,53,37,51],[50,2,38,0,"exports"],[50,9,38,7],[50,10,38,8,"appendBaseUrl"],[50,23,38,21],[50,26,38,24,"appendBaseUrl"],[50,39,38,37],[51,2,39,0],[51,8,39,6,"queryString"],[51,19,39,17],[51,22,39,20,"__importStar"],[51,34,39,32],[51,35,39,33,"require"],[51,42,39,40],[51,43,39,40,"_dependencyMap"],[51,57,39,40],[51,76,39,55],[51,77,39,56],[51,78,39,57],[52,2,40,0],[52,8,40,6,"expo"],[52,12,40,10],[52,15,40,13,"__importStar"],[52,27,40,25],[52,28,40,26,"require"],[52,35,40,33],[52,36,40,33,"_dependencyMap"],[52,50,40,33],[52,81,40,60],[52,82,40,61],[52,83,40,62],[53,2,41,0],[53,8,41,6,"navigationParams_1"],[53,26,41,24],[53,29,41,27,"require"],[53,36,41,34],[53,37,41,34,"_dependencyMap"],[53,51,41,34],[53,77,41,56],[53,78,41,57],[54,2,42,0],[55,2,43,0],[55,8,43,6,"getActiveRoute"],[55,22,43,20],[55,25,43,24,"state"],[55,30,43,29],[55,34,43,34],[56,4,44,4],[56,10,44,10,"route"],[56,15,44,15],[56,18,44,18],[56,25,44,25,"state"],[56,30,44,30],[56,31,44,31,"index"],[56,36,44,36],[56,41,44,41],[56,49,44,49],[56,52,45,10,"state"],[56,57,45,15],[56,58,45,16,"routes"],[56,64,45,22],[56,65,45,23,"state"],[56,70,45,28],[56,71,45,29,"index"],[56,76,45,34],[56,77,45,35],[56,80,46,10,"state"],[56,85,46,15],[56,86,46,16,"routes"],[56,92,46,22],[56,93,46,23,"state"],[56,98,46,28],[56,99,46,29,"routes"],[56,105,46,35],[56,106,46,36,"length"],[56,112,46,42],[56,115,46,45],[56,116,46,46],[56,117,46,47],[57,4,47,4],[57,8,47,8,"route"],[57,13,47,13],[57,14,47,14,"state"],[57,19,47,19],[57,21,47,21],[58,6,48,8],[58,13,48,15,"getActiveRoute"],[58,27,48,29],[58,28,48,30,"route"],[58,33,48,35],[58,34,48,36,"state"],[58,39,48,41],[58,40,48,42],[59,4,49,4],[60,4,50,4],[60,11,50,11,"route"],[60,16,50,16],[61,2,51,0],[61,3,51,1],[62,2,52,0],[62,6,52,4,"cachedNormalizedConfigs"],[62,29,52,27],[62,32,52,30],[62,33,53,4,"undefined"],[62,42,53,13],[62,44,54,4],[62,45,54,5],[62,46,54,6],[62,47,55,1],[63,2,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,0,84,0],[92,2,85,0],[92,11,85,9,"getPathFromState"],[92,27,85,25,"getPathFromState"],[92,28,85,26,"state"],[92,33,85,31],[92,35,85,33,"options"],[92,42,85,40],[92,44,85,42],[93,4,86,4],[93,11,86,11,"getPathDataFromState"],[93,31,86,31],[93,32,86,32,"state"],[93,37,86,37],[93,39,86,39,"options"],[93,46,86,46],[93,47,86,47],[93,48,86,48,"path"],[93,52,86,52],[94,2,87,0],[95,2,88,0],[95,11,88,9,"getPathDataFromState"],[95,31,88,29,"getPathDataFromState"],[95,32,88,30,"state"],[95,37,88,35],[95,39,88,37,"options"],[95,46,88,44],[95,48,88,46],[96,4,89,4],[96,8,89,8,"state"],[96,13,89,13],[96,17,89,17],[96,21,89,21],[96,23,89,23],[97,6,90,8],[97,12,90,14,"Error"],[97,17,90,19],[97,18,90,20],[97,97,90,99],[97,98,90,100],[98,4,91,4],[99,4,92,4],[99,8,92,8,"options"],[99,15,92,15],[99,17,92,17],[100,6,93,8],[101,6,94,8,"expo"],[101,10,94,12],[101,11,94,13,"validatePathConfig"],[101,29,94,31],[101,30,94,32,"options"],[101,37,94,39],[101,38,94,40],[102,6,95,8],[103,6,96,8],[104,4,97,4],[105,4,98,4],[106,4,99,4],[106,8,99,8,"cachedNormalizedConfigs"],[106,31,99,31],[106,32,99,32],[106,33,99,33],[106,34,99,34],[106,39,99,39,"options"],[106,46,99,46],[106,48,99,48,"screens"],[106,55,99,55],[106,57,99,57],[107,6,100,8,"cachedNormalizedConfigs"],[107,29,100,31],[107,32,100,34],[107,33,101,12,"options"],[107,40,101,19],[107,42,101,21,"screens"],[107,49,101,28],[107,51,102,12,"options"],[107,58,102,19],[107,60,102,21,"screens"],[107,67,102,28],[107,70,102,31,"createNormalizedConfigs"],[107,93,102,54],[107,94,102,55,"options"],[107,101,102,62],[107,102,102,63,"screens"],[107,109,102,70],[107,110,102,71],[107,113,102,74],[107,114,102,75],[107,115,102,76],[107,116,103,9],[108,4,104,4],[109,4,105,4],[109,10,105,10,"configs"],[109,17,105,17],[109,20,105,20,"cachedNormalizedConfigs"],[109,43,105,43],[109,44,105,44],[109,45,105,45],[109,46,105,46],[110,4,106,4],[110,8,106,8,"path"],[110,12,106,12],[110,15,106,15],[110,18,106,18],[111,4,107,4],[111,8,107,8,"current"],[111,15,107,15],[111,18,107,18,"state"],[111,23,107,23],[112,4,108,4],[112,10,108,10,"allParams"],[112,19,108,19],[112,22,108,22],[112,23,108,23],[112,24,108,24],[113,4,109,4],[113,11,109,11,"current"],[113,18,109,18],[113,20,109,20],[114,6,110,8],[114,10,110,12,"index"],[114,15,110,17],[114,18,110,20],[114,25,110,27,"current"],[114,32,110,34],[114,33,110,35,"index"],[114,38,110,40],[114,43,110,45],[114,51,110,53],[114,54,110,56,"current"],[114,61,110,63],[114,62,110,64,"index"],[114,67,110,69],[114,70,110,72],[114,71,110,73],[115,6,111,8],[115,10,111,12,"route"],[115,15,111,17],[115,18,111,20,"current"],[115,25,111,27],[115,26,111,28,"routes"],[115,32,111,34],[115,33,111,35,"index"],[115,38,111,40],[115,39,111,41],[116,6,112,8],[116,10,112,12,"pattern"],[116,17,112,19],[117,6,113,8],[117,10,113,12,"focusedParams"],[117,23,113,25],[118,6,114,8],[118,12,114,14,"focusedRoute"],[118,24,114,26],[118,27,114,29,"getActiveRoute"],[118,41,114,43],[118,42,114,44,"state"],[118,47,114,49],[118,48,114,50],[119,6,115,8],[119,10,115,12,"currentOptions"],[119,24,115,26],[119,27,115,29,"configs"],[119,34,115,36],[120,6,116,8],[121,6,117,8],[121,12,117,14,"nestedRouteNames"],[121,28,117,30],[121,31,117,33],[121,33,117,35],[122,6,118,8],[122,10,118,12,"hasNext"],[122,17,118,19],[122,20,118,22],[122,24,118,26],[123,6,119,8],[123,13,119,15,"route"],[123,18,119,20],[123,19,119,21,"name"],[123,23,119,25],[123,27,119,29,"currentOptions"],[123,41,119,43],[123,45,119,47,"hasNext"],[123,52,119,54],[123,54,119,56],[124,8,120,12,"pattern"],[124,15,120,19],[124,18,120,22,"currentOptions"],[124,32,120,36],[124,33,120,37,"route"],[124,38,120,42],[124,39,120,43,"name"],[124,43,120,47],[124,44,120,48],[124,45,120,49,"pattern"],[124,52,120,56],[125,8,121,12,"nestedRouteNames"],[125,24,121,28],[125,25,121,29,"push"],[125,29,121,33],[125,30,121,34,"route"],[125,35,121,39],[125,36,121,40,"name"],[125,40,121,44],[125,41,121,45],[126,8,122,12],[126,12,122,16,"route"],[126,17,122,21],[126,18,122,22,"params"],[126,24,122,28],[126,26,122,30],[127,10,123,16],[127,16,123,22,"stringify"],[127,25,123,31],[127,28,123,34,"currentOptions"],[127,42,123,48],[127,43,123,49,"route"],[127,48,123,54],[127,49,123,55,"name"],[127,53,123,59],[127,54,123,60],[127,56,123,62,"stringify"],[127,65,123,71],[128,10,124,16],[129,10,125,16],[130,10,126,16],[130,16,126,22,"currentParams"],[130,29,126,35],[130,32,126,38,"expo"],[130,36,126,42],[130,37,126,43,"fixCurrentParams"],[130,53,126,59],[130,54,126,60,"allParams"],[130,63,126,69],[130,65,126,71,"route"],[130,70,126,76],[130,72,126,78,"stringify"],[130,81,126,87],[130,82,126,88],[131,10,127,16],[132,10,128,16],[133,10,129,16],[134,10,130,16],[135,10,131,16],[136,10,132,16],[137,10,133,16],[138,10,134,16],[139,10,135,16],[140,10,136,16],[141,10,137,16],[141,14,137,20,"focusedRoute"],[141,26,137,32],[141,31,137,37,"route"],[141,36,137,42],[141,38,137,44],[142,12,138,20],[143,12,139,20],[144,12,140,20,"focusedParams"],[144,25,140,33],[144,28,140,33,"Object"],[144,34,140,33],[144,35,140,33,"assign"],[144,41,140,33],[144,46,140,41,"currentParams"],[144,59,140,54],[144,60,140,56],[145,12,141,20,"pattern"],[145,19,141,27],[145,21,142,26,"split"],[145,26,142,31],[145,27,142,32],[145,30,142,35],[145,31,142,36],[145,32,143,25,"filter"],[145,38,143,31],[145,39,143,33,"p"],[145,40,143,34],[145,44,143,39,"expo"],[145,48,143,43],[145,49,143,44,"isDynamicPart"],[145,62,143,57],[145,63,143,58,"p"],[145,64,143,59],[145,65,143,60],[146,12,144,24],[147,12,144,24],[147,13,145,25,"forEach"],[147,20,145,32],[147,21,145,34,"p"],[147,22,145,35],[147,26,145,40],[148,14,146,24],[148,20,146,30,"name"],[148,24,146,34],[148,27,146,37,"expo"],[148,31,146,41],[148,32,146,42,"getParamName"],[148,44,146,54],[148,45,146,55,"p"],[148,46,146,56],[148,47,146,57],[149,14,147,24],[150,14,148,24],[150,18,148,28,"focusedParams"],[150,31,148,41],[150,33,148,43],[151,16,149,28],[152,16,150,28],[152,23,150,35,"focusedParams"],[152,36,150,48],[152,37,150,49,"name"],[152,41,150,53],[152,42,150,54],[153,14,151,24],[154,12,152,20],[154,13,152,21],[154,14,152,22],[155,10,153,16],[156,8,154,12],[157,8,155,12],[158,8,156,12],[158,12,156,16],[158,13,156,17,"currentOptions"],[158,27,156,31],[158,28,156,32,"route"],[158,33,156,37],[158,34,156,38,"name"],[158,38,156,42],[158,39,156,43],[158,40,156,44,"screens"],[158,47,156,51],[158,51,156,55,"route"],[158,56,156,60],[158,57,156,61,"state"],[158,62,156,66],[158,67,156,71,"undefined"],[158,76,156,80],[158,78,156,82],[159,10,157,16],[160,10,158,16],[161,10,159,16],[162,10,160,16],[163,10,161,16],[164,10,162,16],[165,10,163,16],[166,10,164,16],[167,10,165,16],[168,10,166,16],[169,10,167,16],[170,10,168,16],[171,10,169,16],[172,10,170,16],[173,10,171,16],[174,10,172,16],[174,16,172,22,"screens"],[174,23,172,29],[174,26,172,32,"currentOptions"],[174,40,172,46],[174,41,172,47,"route"],[174,46,172,52],[174,47,172,53,"name"],[174,51,172,57],[174,52,172,58],[174,53,172,59,"screens"],[174,60,172,66],[175,10,173,16],[176,10,174,16],[177,10,175,16],[177,16,175,22,"targetScreen"],[177,28,175,34],[178,10,176,16],[179,10,177,16,"route"],[179,15,177,21],[179,16,177,22,"params"],[179,22,177,28],[179,26,177,32],[179,34,177,40],[179,38,177,44,"route"],[179,43,177,49],[179,44,177,50,"params"],[179,50,177,56],[179,54,177,60],[179,61,177,67,"route"],[179,66,177,72],[179,67,177,73,"params"],[179,73,177,79],[179,74,177,80,"screen"],[179,80,177,86],[179,85,177,91],[179,93,177,99],[179,96,178,22,"route"],[179,101,178,27],[179,102,178,28,"params"],[179,108,178,34],[179,109,178,35,"screen"],[179,115,178,41],[179,118,179,22],[179,125,179,29],[180,10,180,16],[181,10,181,16],[182,10,182,16],[183,10,183,16],[183,16,183,22,"screen"],[183,22,183,28],[183,25,183,31,"screens"],[183,32,183,38],[183,35,184,22,"screens"],[183,42,184,29],[183,43,184,30,"targetScreen"],[183,55,184,42],[183,56,184,43],[183,59,185,26,"targetScreen"],[183,71,185,38],[183,74,186,26,"Object"],[183,80,186,32],[183,81,186,33,"keys"],[183,85,186,37],[183,86,186,38,"screens"],[183,93,186,45],[183,94,186,46],[183,95,186,47],[183,96,186,48],[183,97,186,49],[183,100,187,22,"undefined"],[183,109,187,31],[184,10,188,16],[184,14,188,20,"screen"],[184,20,188,26],[184,24,188,30,"screens"],[184,31,188,37],[184,35,188,41,"currentOptions"],[184,49,188,55],[184,50,188,56,"route"],[184,55,188,61],[184,56,188,62,"name"],[184,60,188,66],[184,61,188,67],[184,62,188,68,"screens"],[184,69,188,75],[184,72,188,78,"screen"],[184,78,188,84],[184,79,188,85],[184,81,188,87],[185,12,189,20,"route"],[185,17,189,25],[185,20,189,25,"Object"],[185,26,189,25],[185,27,189,25,"assign"],[185,33,189,25],[185,38,189,33,"screens"],[185,45,189,40],[185,46,189,41,"screen"],[185,52,189,47],[185,53,189,48],[186,14,189,50,"name"],[186,18,189,54],[186,20,189,56,"screen"],[186,26,189,62],[187,14,189,64,"key"],[187,17,189,67],[187,19,189,69,"screen"],[188,12,189,75],[188,14,189,77],[189,12,190,20,"currentOptions"],[189,26,190,34],[189,29,190,37,"screens"],[189,36,190,44],[190,10,191,16],[190,11,191,17],[190,17,192,21],[191,12,193,20,"hasNext"],[191,19,193,27],[191,22,193,30],[191,27,193,35],[192,10,194,16],[193,10,195,16],[194,10,196,16],[195,8,197,12],[195,9,197,13],[195,15,198,17],[196,10,199,16,"index"],[196,15,199,21],[196,18,200,20],[196,25,200,27,"route"],[196,30,200,32],[196,31,200,33,"state"],[196,36,200,38],[196,37,200,39,"index"],[196,42,200,44],[196,47,200,49],[196,55,200,57],[196,58,200,60,"route"],[196,63,200,65],[196,64,200,66,"state"],[196,69,200,71],[196,70,200,72,"index"],[196,75,200,77],[196,78,200,80,"route"],[196,83,200,85],[196,84,200,86,"state"],[196,89,200,91],[196,90,200,92,"routes"],[196,96,200,98],[196,97,200,99,"length"],[196,103,200,105],[196,106,200,108],[196,107,200,109],[197,10,201,16],[197,16,201,22,"nextRoute"],[197,25,201,31],[197,28,201,34,"route"],[197,33,201,39],[197,34,201,40,"state"],[197,39,201,45],[197,40,201,46,"routes"],[197,46,201,52],[197,47,201,53,"index"],[197,52,201,58],[197,53,201,59],[198,10,202,16],[198,16,202,22,"nestedConfig"],[198,28,202,34],[198,31,202,37,"currentOptions"],[198,45,202,51],[198,46,202,52,"route"],[198,51,202,57],[198,52,202,58,"name"],[198,56,202,62],[198,57,202,63],[198,58,202,64,"screens"],[198,65,202,71],[199,10,203,16],[200,10,204,16],[200,14,204,20,"nestedConfig"],[200,26,204,32],[200,30,204,36,"nextRoute"],[200,39,204,45],[200,40,204,46,"name"],[200,44,204,50],[200,48,204,54,"nestedConfig"],[200,60,204,66],[200,62,204,68],[201,12,205,20,"route"],[201,17,205,25],[201,20,205,28,"nextRoute"],[201,29,205,37],[202,12,206,20,"currentOptions"],[202,26,206,34],[202,29,206,37,"nestedConfig"],[202,41,206,49],[203,10,207,16],[203,11,207,17],[203,17,208,21],[204,12,209,20],[205,12,210,20,"hasNext"],[205,19,210,27],[205,22,210,30],[205,27,210,35],[206,10,211,16],[207,8,212,12],[208,6,213,8],[209,6,214,8],[209,10,214,12,"pattern"],[209,17,214,19],[209,22,214,24,"undefined"],[209,31,214,33],[209,33,214,35],[210,8,215,12,"pattern"],[210,15,215,19],[210,18,215,22,"nestedRouteNames"],[210,34,215,38],[210,35,215,39,"join"],[210,39,215,43],[210,40,215,44],[210,43,215,47],[210,44,215,48],[211,6,216,8],[212,6,217,8],[212,10,217,12,"currentOptions"],[212,24,217,26],[212,25,217,27,"route"],[212,30,217,32],[212,31,217,33,"name"],[212,35,217,37],[212,36,217,38],[212,41,217,43,"undefined"],[212,50,217,52],[212,52,217,54],[213,8,218,12],[214,8,219,12,"path"],[214,12,219,16],[214,16,219,20,"expo"],[214,20,219,24],[214,21,219,25,"getPathWithConventionsCollapsed"],[214,52,219,56],[214,53,219,56,"Object"],[214,59,219,56],[214,60,219,56,"assign"],[214,66,219,56],[214,71,220,19,"options"],[214,78,220,26],[215,10,221,16,"pattern"],[215,17,221,23],[216,10,222,16,"route"],[216,15,222,21],[217,10,223,16,"params"],[217,16,223,22],[217,18,223,24,"allParams"],[217,27,223,33],[218,10,224,16,"initialRouteName"],[218,26,224,32],[218,28,224,34,"configs"],[218,35,224,41],[218,36,224,42,"route"],[218,41,224,47],[218,42,224,48,"name"],[218,46,224,52],[218,47,224,53],[218,49,224,55,"initialRouteName"],[219,8,224,71],[219,10,225,13],[219,11,225,14],[220,8,226,12],[221,8,227,12],[222,8,228,12],[223,8,229,12],[224,8,230,12],[225,8,231,12],[226,8,232,12],[227,8,233,12],[228,8,234,12],[229,8,235,12],[230,8,236,12],[231,8,237,12],[232,8,238,12],[233,8,239,12],[234,8,240,12],[235,8,241,12],[236,8,242,12],[237,8,243,12],[238,8,244,12],[239,8,245,12],[240,8,246,12],[241,8,247,12],[242,8,248,12],[243,8,249,12],[244,8,250,12],[245,8,251,12],[246,8,252,12],[247,6,253,8],[247,7,253,9],[247,13,254,13],[247,17,254,17],[247,18,254,18,"route"],[247,23,254,23],[247,24,254,24,"name"],[247,28,254,28],[247,29,254,29,"startsWith"],[247,39,254,39],[247,40,254,40],[247,43,254,43],[247,44,254,44],[247,46,254,46],[248,8,255,12,"path"],[248,12,255,16],[248,16,255,20,"encodeURIComponent"],[248,34,255,38],[248,35,255,39,"route"],[248,40,255,44],[248,41,255,45,"name"],[248,45,255,49],[248,46,255,50],[249,6,256,8],[250,6,257,8],[251,6,258,8],[251,10,258,12],[251,11,258,13,"focusedParams"],[251,24,258,26],[251,26,258,28],[252,8,259,12,"focusedParams"],[252,21,259,25],[252,24,259,28,"focusedRoute"],[252,36,259,40],[252,37,259,41,"params"],[252,43,259,47],[253,6,260,8],[254,6,261,8],[254,10,261,12,"route"],[254,15,261,17],[254,16,261,18,"state"],[254,21,261,23],[254,23,261,25],[255,8,262,12,"path"],[255,12,262,16],[255,16,262,20],[255,19,262,23],[256,6,263,8],[256,7,263,9],[256,13,264,13],[256,17,264,17,"focusedParams"],[256,30,264,30],[256,32,264,32],[257,8,265,12],[257,13,265,17],[257,19,265,23,"param"],[257,24,265,28],[257,28,265,32,"focusedParams"],[257,41,265,45],[257,43,265,47],[258,10,266,16],[258,14,266,20,"focusedParams"],[258,27,266,33],[258,28,266,34,"param"],[258,33,266,39],[258,34,266,40],[258,39,266,45],[258,50,266,56],[258,52,266,58],[259,12,267,20],[260,12,268,20],[260,19,268,27,"focusedParams"],[260,32,268,40],[260,33,268,41,"param"],[260,38,268,46],[260,39,268,47],[261,10,269,16],[262,8,270,12],[263,8,271,12],[264,8,272,12],[264,15,272,19,"focusedParams"],[264,28,272,32],[264,29,272,33],[264,32,272,36],[264,33,272,37],[265,8,273,12,"focusedParams"],[265,21,273,25],[265,24,273,28],[265,25,273,29],[265,26,273,30],[265,28,273,32,"navigationParams_1"],[265,46,273,50],[265,47,273,51,"removeInternalExpoRouterParams"],[265,77,273,81],[265,79,273,83,"focusedParams"],[265,92,273,96],[265,93,273,97],[266,8,274,12],[267,8,275,12],[267,14,275,18,"query"],[267,19,275,23],[267,22,275,26,"queryString"],[267,33,275,37],[267,34,275,38,"stringify"],[267,43,275,47],[267,44,275,48,"focusedParams"],[267,57,275,61],[267,59,275,63],[268,10,275,65,"sort"],[268,14,275,69],[268,16,275,71],[269,8,275,77],[269,9,275,78],[269,10,275,79],[270,8,276,12],[270,12,276,16,"query"],[270,17,276,21],[270,19,276,23],[271,10,277,16,"path"],[271,14,277,20],[271,18,277,24],[271,22,277,28,"query"],[271,27,277,33],[271,29,277,35],[272,8,278,12],[273,6,279,8],[274,6,280,8,"current"],[274,13,280,15],[274,16,280,18,"route"],[274,21,280,23],[274,22,280,24,"state"],[274,27,280,29],[275,4,281,4],[276,4,282,4],[277,4,283,4,"path"],[277,8,283,8],[277,11,283,11,"path"],[277,15,283,15],[277,16,283,16,"replace"],[277,23,283,23],[277,24,283,24],[277,30,283,30],[277,32,283,32],[277,35,283,35],[277,36,283,36],[278,4,284,4,"path"],[278,8,284,8],[278,11,284,11,"path"],[278,15,284,15],[278,16,284,16,"length"],[278,22,284,22],[278,25,284,25],[278,26,284,26],[278,29,284,29,"path"],[278,33,284,33],[278,34,284,34,"replace"],[278,41,284,41],[278,42,284,42],[278,47,284,47],[278,49,284,49],[278,51,284,51],[278,52,284,52],[278,55,284,55,"path"],[278,59,284,59],[279,4,285,4],[280,4,286,4],[280,8,286,8,"options"],[280,15,286,15],[280,17,286,17,"path"],[280,21,286,21],[280,23,286,23],[281,6,287,8,"path"],[281,10,287,12],[281,13,287,15,"joinPaths"],[281,22,287,24],[281,23,287,25,"options"],[281,30,287,32],[281,31,287,33,"path"],[281,35,287,37],[281,37,287,39,"path"],[281,41,287,43],[281,42,287,44],[282,4,288,4],[283,4,289,4],[284,4,290,4,"path"],[284,8,290,8],[284,11,290,11,"expo"],[284,15,290,15],[284,16,290,16,"appendBaseUrl"],[284,29,290,29],[284,30,290,30,"path"],[284,34,290,34],[284,35,290,35],[285,4,291,4],[285,8,291,8,"allParams"],[285,17,291,17],[285,18,291,18],[285,21,291,21],[285,22,291,22],[285,24,291,24],[286,6,292,8,"path"],[286,10,292,12],[286,14,292,16],[286,18,292,20,"allParams"],[286,27,292,29],[286,28,292,30],[286,31,292,33],[286,32,292,34],[286,34,292,36],[287,4,293,4],[288,4,294,4],[289,4,295,4],[290,4,296,4],[290,11,296,11],[291,6,296,13,"path"],[291,10,296,17],[292,6,296,19,"params"],[292,12,296,25],[292,14,296,27,"allParams"],[293,4,296,37],[293,5,296,38],[294,4,297,4],[295,2,298,0],[296,2,299,0],[297,2,300,0],[297,8,300,6,"joinPaths"],[297,17,300,15],[297,20,300,18,"joinPaths"],[297,21,300,19],[297,24,300,22,"paths"],[297,29,300,27],[297,34,300,32],[297,36,300,34],[297,37,301,5,"concat"],[297,43,301,11],[297,44,301,12],[297,47,301,15,"paths"],[297,52,301,20],[297,53,301,21,"map"],[297,56,301,24],[297,57,301,26,"p"],[297,58,301,27],[297,62,301,32,"p"],[297,63,301,33],[297,64,301,34,"split"],[297,69,301,39],[297,70,301,40],[297,73,301,43],[297,74,301,44],[297,75,301,45],[297,76,301,46],[297,77,302,5,"filter"],[297,83,302,11],[297,84,302,12,"Boolean"],[297,91,302,19],[297,92,302,20],[297,93,303,5,"join"],[297,97,303,9],[297,98,303,10],[297,101,303,13],[297,102,303,14],[298,2,304,0],[298,8,304,6,"createConfigItem"],[298,24,304,22],[298,27,304,25,"createConfigItem"],[298,28,304,26,"config"],[298,34,304,32],[298,36,304,34,"parentPattern"],[298,49,304,47],[298,54,304,52],[299,4,305,4],[299,8,305,8],[299,15,305,15,"config"],[299,21,305,21],[299,26,305,26],[299,34,305,34],[299,36,305,36],[300,6,306,8],[301,6,307,8],[301,12,307,14,"pattern"],[301,19,307,21],[301,22,307,24,"parentPattern"],[301,35,307,37],[301,38,307,40,"joinPaths"],[301,47,307,49],[301,48,307,50,"parentPattern"],[301,61,307,63],[301,63,307,65,"config"],[301,69,307,71],[301,70,307,72],[301,73,307,75,"config"],[301,79,307,81],[302,6,308,8],[302,13,308,15],[303,8,308,17,"pattern"],[304,6,308,25],[304,7,308,26],[305,4,309,4],[306,4,310,4],[306,8,310,8,"config"],[306,14,310,14],[306,15,310,15,"exact"],[306,20,310,20],[306,24,310,24,"config"],[306,30,310,30],[306,31,310,31,"path"],[306,35,310,35],[306,40,310,40,"undefined"],[306,49,310,49],[306,51,310,51],[307,6,311,8],[307,12,311,14],[307,16,311,18,"Error"],[307,21,311,23],[307,22,311,24],[307,172,311,174],[307,173,311,175],[308,4,312,4],[309,4,313,4],[310,4,314,4],[311,4,315,4],[311,10,315,10,"pattern"],[311,17,315,17],[311,20,315,20,"config"],[311,26,315,26],[311,27,315,27,"exact"],[311,32,315,32],[311,37,315,37],[311,41,315,41],[311,44,315,44,"joinPaths"],[311,53,315,53],[311,54,315,54,"parentPattern"],[311,67,315,67],[311,71,315,71],[311,73,315,73],[311,75,315,75,"config"],[311,81,315,81],[311,82,315,82,"path"],[311,86,315,86],[311,90,315,90],[311,92,315,92],[311,93,315,93],[311,96,315,96,"config"],[311,102,315,102],[311,103,315,103,"path"],[311,107,315,107],[311,111,315,111],[311,113,315,113],[312,4,316,4],[312,10,316,10,"screens"],[312,17,316,17],[312,20,316,20,"config"],[312,26,316,26],[312,27,316,27,"screens"],[312,34,316,34],[312,37,316,37,"createNormalizedConfigs"],[312,60,316,60],[312,61,316,61,"config"],[312,67,316,67],[312,68,316,68,"screens"],[312,75,316,75],[312,77,316,77,"pattern"],[312,84,316,84],[312,85,316,85],[312,88,316,88,"undefined"],[312,97,316,97],[313,4,317,4],[313,11,317,11],[314,6,318,8],[315,6,319,8,"pattern"],[315,13,319,15],[315,15,319,17,"pattern"],[315,22,319,24],[315,24,319,26,"split"],[315,29,319,31],[315,30,319,32],[315,33,319,35],[315,34,319,36],[315,35,319,37,"filter"],[315,41,319,43],[315,42,319,44,"Boolean"],[315,49,319,51],[315,50,319,52],[315,51,319,53,"join"],[315,55,319,57],[315,56,319,58],[315,59,319,61],[315,60,319,62],[316,6,320,8,"stringify"],[316,15,320,17],[316,17,320,19,"config"],[316,23,320,25],[316,24,320,26,"stringify"],[316,33,320,35],[317,6,321,8,"screens"],[318,4,322,4],[318,5,322,5],[319,2,323,0],[319,3,323,1],[320,2,324,0],[320,8,324,6,"createNormalizedConfigs"],[320,31,324,29],[320,34,324,32,"createNormalizedConfigs"],[320,35,324,33,"options"],[320,42,324,40],[320,44,324,42,"pattern"],[320,51,324,49],[320,56,324,54,"Object"],[320,62,324,60],[320,63,324,61,"fromEntries"],[320,74,324,72],[320,75,324,73,"Object"],[320,81,324,79],[320,82,324,80,"entries"],[320,89,324,87],[320,90,324,88,"options"],[320,97,324,95],[320,98,324,96],[320,99,324,97,"map"],[320,102,324,100],[320,103,324,101],[320,104,324,102],[320,105,324,103,"name"],[320,109,324,107],[320,111,324,109,"c"],[320,112,324,110],[320,113,324,111],[320,118,324,116],[321,4,325,4],[321,10,325,10,"result"],[321,16,325,16],[321,19,325,19,"createConfigItem"],[321,35,325,35],[321,36,325,36,"c"],[321,37,325,37],[321,39,325,39,"pattern"],[321,46,325,46],[321,47,325,47],[322,4,326,4],[322,11,326,11],[322,12,326,12,"name"],[322,16,326,16],[322,18,326,18,"result"],[322,24,326,24],[322,25,326,25],[323,2,327,0],[323,3,327,1],[323,4,327,2],[323,5,327,3],[324,2,328,0],[324,11,328,9,"appendBaseUrl"],[324,24,328,22,"appendBaseUrl"],[324,25,328,23,"path"],[324,29,328,27],[324,31,328,29,"baseUrl"],[324,38,328,36],[324,43,328,64],[324,45,328,66],[325,4,329,4],[325,8,329,8,"process"],[325,15,329,15],[325,16,329,16,"env"],[325,19,329,19],[325,20,329,20,"NODE_ENV"],[325,28,329,28],[325,33,329,33],[325,46,329,46],[325,48,329,48],[326,6,330,8],[326,10,330,12,"baseUrl"],[326,17,330,19],[326,19,330,21],[327,8,331,12],[327,15,331,19],[327,19,331,23,"baseUrl"],[327,26,331,30],[327,27,331,31,"replace"],[327,34,331,38],[327,35,331,39],[327,41,331,45],[327,43,331,47],[327,45,331,49],[327,46,331,50],[327,47,331,51,"replace"],[327,54,331,58],[327,55,331,59],[327,60,331,64],[327,62,331,66],[327,64,331,68],[327,65,331,69],[327,68,331,72,"path"],[327,72,331,76],[327,74,331,78],[328,6,332,8],[329,4,333,4],[330,4,334,4],[330,11,334,11,"path"],[330,15,334,15],[331,2,335,0],[332,0,335,1],[332,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;uBIS;CJQ;AKkC;CLE;AMC;gCCuD,4BD;iCEE;qBFO;CNkJ;kBSE;yBCC,mBD;cTE;yBWC;CXmB;gCYC,qEC;CDG,EZ;AcC;CdO"},"hasCjsExports":true},"type":"js/module"}]}